var assert = require('assert')
  , options = require('../').options;

describe('long options', function () {
    var parsed = options(['--debug', '--port', '3000', 'foo', '--bar', '--', 'bar']);
    it('should consume the next arg', function (done) {
        assert.equal(3000, parsed.port);
        done();
    });
    it('should parse numeric strings', function (done) {
        assert.equal('number', typeof parsed.port);
        done();
    });
    it('should give opts with no arg a value of 1', function (done) {
        assert.equal(1, parsed.debug);
        assert.equal(1, parsed.bar);
        done();
    });
    it('should collect all other args in argv', function (done) {
        assert.equal(2, parsed.argv.length);
        assert.equal('foo', parsed.argv[0]);
        assert.equal('bar', parsed.argv[1]);
        done();
    });
});

describe('short options', function () {
    var parsed = options(['-d', '-p', '3.0', '-abc', '-vvv', '--', '-x']);
    it('should consume the next arg', function (done) {
        assert.equal(3.0, parsed.p);
        done();
    });
    it('should parse float args', function (done) {
        assert.equal('number', typeof parsed.p);
        done();
    });
    it('should give options with no arg a value of 1', function (done) {
        assert.equal(1, parsed.d);
        done();
    });
    it('should match multiple short options in the same arg', function (done) {
        assert.equal(1, parsed.a);
        assert.equal(1, parsed.b);
        assert.equal(1, parsed.c);
        done();
    });
    it('should increment the value of short options that appear multiple times', function (done) {
        assert.equal(3, parsed.v);
        done();
    });
    it('should not parse args after an escape => --', function (done) {
        assert.equal(1, parsed.argv.length);
        assert.equal('-x', parsed.argv[0]);
        assert.equal('undefined', typeof parsed.x);
        done();
    });
    it('should not assign values to boolean options', function (done) {
        var parsed = options(['-d', '-p', '3.0', '-x'], ['p']);
        assert.equal(1, parsed.argv.length);
        assert.equal('3.0', parsed.argv[0]);
        assert.equal(1, parsed.d);
        assert.equal(1, parsed.x);
        assert.equal(1, parsed.p);
        done();
    });
});
