var utils = require('../').utils
  , assert = require('assert');

describe('utils', function () {
    it('should provide a noop function', function (done) {
        assert.equal('function', typeof utils.noop);
        done();
    });
    it('should convert arguments to an array', function (done) {
        var tester = function (a, b, c) {
            var args = utils.toArray(arguments);
            assert.equal(3, args.length);
            assert(Array.isArray(args));
            assert.equal(1, args[0]);
            assert.equal('2', args[1]);
            assert.equal(1, args[2].a);
            done();
        };
        tester(1, '2', { a: 1 });
    });
    it('should md5', function (done) {
        assert.equal('acbd18db4cc2f85cedef654fccc4a4d8', utils.md5('foo'));
        assert.equal('37b51d194a7513e45b56f6524f2d51f2', utils.md5('bar'));
        done();
    });
    it('should mixin properties', function (done) {
        var a = { a: 1, b: 2 }, b = { c: 3 }, c = { a: 4, d: 5 };
        var target = utils.mixin({}, a, b, c);
        assert.equal(4, target.a);
        assert.equal(2, target.b);
        assert.equal(3, target.c);
        assert.equal(5, target.d);
        done();
    });
    it('should merge defaults', function (done) {
        var a = { a: { b: 1, c: 1 }, d: 1 }, def = { a: { b: 2, d: 1 }, c: 3 };
        utils.defaults(a, def);
        assert.equal(1, a.a.b);
        assert.equal(1, a.a.c);
        assert.equal(1, a.a.d);
        assert.equal(3, a.c);
        assert.equal(1, a.d);
        done();
    });
    it('should produce random numbers in a range', function (done) {
        var i = 100, rand;
        while (i--) {
            rand = utils.rand(5, 10);
            assert(rand >= 5 && rand <= 10);
        }
        done();
    });
    it('should produce random numbers less than max', function (done) {
        var i = 100, rand;
        while (i--) {
            rand = utils.rand(5);
            assert(rand >= 0 && rand <= 5);
        }
        done();
    });
    it('should flip arrays into objects', function (done) {
        var arr = ['foo', 'bar'], obj = utils.flip(arr);
        assert(typeof obj.foo !== 'undefined');
        assert(typeof obj.bar !== 'undefined');
        assert(typeof obj.foobar === 'undefined');
        assert.equal(true, obj.foo);
        assert.equal(true, obj.bar);
        obj = utils.flip(arr, 2);
        assert.equal(2, obj.foo);
        assert.equal(2, obj.bar);
        done();
    });
    it('should create slugs from strings', function (done) {
        assert.equal('foo-bar', utils.slug('Foo BAR'));
        assert.equal('foo-bar', utils.slug('(*&Foo BAR[](&*'));
        assert.equal('chris-ohara', utils.slug('Chris O\'Hara'));
        done();
    });
    it('should proper case strings', function (done) {
        assert.equal('Foo The Bar', utils.properCase('foo the BAR'));
        done();
    });
    it('should create random strings', function (done) {
        var rand = utils.randStr(10, 'abc'), i = 0;
        assert.equal(10, rand.length);
        for (; i < 10; i++) {
            assert(rand[i] === 'a' || rand[i] === 'b' || rand[i] === 'c');
        }
        done();
    });
});

