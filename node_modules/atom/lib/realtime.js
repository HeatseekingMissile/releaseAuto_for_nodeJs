var socketio = require('socket.io')
  , fs = require('fs')
  , redis = require('./redis')
  , express = require('express')
  , utils = require('./utils');

module.exports = function (config, server) {
    var io, io_store, redis_client, session = false
      , rpc = {}, rpc_available = [];

    //Use redis if it's available
    if (config.redis || (server && server.redis)) {
        io_store = new socketio.RedisStore({
            redisClient: config.redis || server.redis
        });
    } else {
        io_store = new socketio.MemoryStore();
    }

    //Start the socket.io server
    if (server) {
        io = server.io = socketio.listen(server);
    } else {
        io = socketio.listen(config.port || process.env.PORT || 3000);
    }

    //Setup socket.io config
    io.configure(function () {
        io.set('transports', [
            'websocket', 'htmlfile',
            'xhr-polling', 'jsonp-polling'
        ]);
        io.enable('browser client minification');
        io.enable('browser client etag');
        io.enable('browser client gzip');
        io.set('log level', config.debug ? 3 : 0);
        io.set('store', io_store);
    });

    if (server) {

        //Check if session middleware has been added
        session = server.stack.filter(function (middleware) {
            return middleware.handle.name === 'session'
        }).length > 0;

        //If so, expose the session as socket.session
        //Credit to http://www.danielbaulig.de/socket-ioexpress/
        if (session && server.session_store && server.session_cookie) {

            var session_cookie = new RegExp('(^| )' + server.session_cookie + '=([^;]+)');

            io.configure(function () {
                io.set('authorization', function (data, callback) {
                    var cookie = (data.headers.cookie || '').match(session_cookie)
                      , sid = cookie[2];
                    if (!cookie) {
                        return callback('no session cookie', false);
                    }
                    server.session_store.get(sid, function (err, session) {

                        //TODO: FIXME
                        return callback(null, true);

                        if (err || !session) {
                            return callback('no session data', false);
                        }
                        data.session = new express.session.Session({
                            sessionID: sid
                          , sessionStore: server.session_store
                        }, session);
                        io.sockets.on('connection', function (socket) {
                            socket.session = socket.handshake.session;
                            var touchSession = setInterval(function () {
                                socket.session.reload(function () {
                                    socket.session.touch().save();
                                });
                            }, 60 * 1000);
                            socket.on('disconnect', function () {
                                clearInterval(touchSession);
                            });
                        });
                        callback(null, true);
                    });
                });
            });
        }
    }

    return io;

};

