var fs = require('fs')
  , vm = require('vm')
  , utils = require('./utils');

module.exports = function (file, env, options) {

    var parser, config, current;

    //env is optional
    if (typeof env === "object") {
        options = env;
        env = null;
    } else {
        options = options || {};
    }

    //Load and parse the config file
    try {
        config = fs.readFileSync(file).toString();
    } catch (e) {
        if (options.ignore) return {};
        throw e;
    }

    //Work out how to parse the file
    if (!options.parser) {
         if (/\.json$/i.test(file)) {

            options.parser = JSON.parse;

        } else if (/\.ya?ml$/i.test(file)) {

            options.parser = require('yaml').eval;

        } else if (/\.js$/i.test(file)) {

            options.parser = function (config) {
                var sandbox = { module: { exports: {} } };
                vm.runInNewContext(config, sandbox);
                return sandbox.module.exports;
            };

        } else {
            throw new Error('No config parser available');
        }
    }

    //Get environment config
    config = options.parser(config);

    //If not using environment config, just return the obejct
    if (env === false) {
        return config;
    }

    //Get the environment config
    env = env || process.env[options.env || 'NODE_ENV'] || 'default';
    current = config[env];

    //Merge defaults
    if (typeof current === "object" && config.default) {
        utils.defaults(current, config.default);
    }

    return current || config.default || config;

};

