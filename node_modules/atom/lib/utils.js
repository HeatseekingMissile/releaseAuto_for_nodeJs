var crypto = require('crypto')
  , utils = exports;

/**
 * A noop function.
 *
 * @api public
 */

utils.noop = function () {};

/**
 * Convert an object (e.g. `arguments`) to an array.
 *
 * @param {object} obj
 * @return {array} array
 * @api public
 */

utils.toArray = function (obj) {
    var len = obj.length
      , arr = new Array(len)
      , i = 0;
    for (; i < len; i++) {
        arr[i] = obj[i];
    }
    return arr;
};

/**
 * Mixin properties to `target`.
 *
 * @param {object} target
 * @param {object} obj1..N
 * @return {object} target
 * @api public
 */

utils.mixin = function (target, obj) {
    var args = utils.toArray(arguments)
      , len = args.length
      , j, i = 1;
    for (; i < len; i++) {
        for (j in args[i]) {
            target[j] = args[i][j];
        }
    }
    return target;
};

/**
 * Recursively copy properties from `src` to `dest` if they don't exist.
 *
 * @param {object} dest
 * @param {object} src
 * @return {object} dest
 * @api public
 */

utils.defaults = function (dest, src) {
    for (var i in src) {
        if (typeof dest[i] === "undefined") {
            dest[i] = src[i];
        } else if (typeof dest[i] === "object" && !Array.isArray(dest[i])) {
            utils.defaults(dest[i], src[i]);
        }
    }
    return dest;
};

/**
 * Get a random number between `min` and `max`.
 *
 * @param {number} min
 * @param {number} max
 * @return {number} random_num
 * @api public
 */

utils.rand = function (min, max) {
    if (arguments.length === 1) max = min, min = 0;
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

/**
 * Flip an array so that each value becomes a key in an object.
 *
 * @param {array} arr - the array of keys
 * @param {mixed} sentinel (optional) - each key's value
 * @return {object} obj
 * @api public
 */

utils.flip = function (arr, sentinel) {
    if (arguments.length === 1) {
        sentinel = true;
    }
    var i = 0, l = arr.length, obj = {};
    for (; i < l; i++) {
        obj[arr[i]] = sentinel;
    }
    return obj
};

/**
 * Get the MD5 hash of `str`.
 *
 * @param {string} str
 * @return {string} hash
 * @api public
 */

utils.md5 = function (str) {
    return crypto.createHash('md5').update(str || '').digest('hex');
};

/**
 * Get the slug of `str`.
 *
 * @param {string} str
 * @return {string} slug
 * @api public
 */

utils.slug = function (str) {
    str = str || '';
    var slug = str.replace('\'', '')
                  .replace(/[^a-z0-9]/gi, '-')
                  .replace(/--+/g, '-')
                  .replace(/^-/, '')
                  .replace(/-$/, '')
                  .toLowerCase();
    return slug;
};

/**
 * Convert words to proper case.
 *
 * @param {string} str
 * @return {string} proper_cased
 * @api public
 */

utils.properCase = function (str) {
    return str.toLowerCase().replace(/( |^)[a-z]/g, function (letter) {
        return letter.toUpperCase();
    });
};

/**
 * Create a random string.
 *
 * @param {number} len
 * @param {string} chars (optional)
 * @return {string} rand_str
 * @api public
 */

utils.randStr = function (len, chars) {
    len = len || 32;
    chars = chars || '0123456789abcdef';
    var char_len = chars.length - 1, str = '';
    while (len--) {
        str += chars[utils.rand(0, char_len)];
    }
    return str;
};

