var fs = require('fs')
  , express = require('express')
  , hogan = require('hogan.js')
  , RedisStore = require('connect-redis')(express)
  , redis = require('./redis')
  , conf = require('./config')
  , utils = require('./utils')
  , helpers = require('./helpers')
  , realtime = require('./realtime')
  , loader = require('./loader');

module.exports = function (path, config, middleware) {

    var session_store, io_store, server = express();

    //Try and load config if none is provided
    config = config || conf(path + '/config.json', { ignore: true });

    //Use the default stack of middleware if none is provided
    middleware = middleware || [
        express.logger()
      , express.static(path + '/public')
      , express.bodyParser()
      , express.methodOverride()
      , express.cookieParser(config.secret || 'secret')
    ];

    //Add middleware
    middleware.forEach(function (module) {
        server.use(module);
    });

    //Use Redis if it's available
    if (config.redis) {
        server.redis = redis(config.redis);
        session_store = new RedisStore({ client: server.redis });
    } else {
        session_store = new express.session.MemoryStore();
    }

    //Setup the session handler
    server.use(express.session({
        secret: config.secret || 'secret'
      , key: config.session || 'sid'
      , store: session_store
    }));

    //Expose configuration and add view helpers
    server.use(function (request, response, next) {
        response.locals({ config: config });
        response.locals(helpers);
        next();
    });

    //Setup views - use hogan.js with a .html ext for templates
    server.set('views', path + '/views');
    server.set('view options', { layout: path + '/views/layout' });
    server.set('view engine', 'html');
    server.set('view cache', !!config.production);
    server.engine('html', function (path, locals, callback) {
        var layout = server.set('view options').layout || null
          , engine = server.set('view engine') || null;
        fs.readFile(path, 'utf8', function (err, str) {
            if (err) return callback(err);
            var body, template = hogan.compile(str);
            try {
                locals.body = template.render(locals);
            } catch (err) {
                callback(err);
            }
            fs.readFile(layout + '.' + engine, 'utf8', function (err, str) {
                if (err) return callback(err);
                var layout, template = hogan.compile(str);
                try {
                    callback(null, template.render(locals));
                } catch (err) {
                    callback(err);
                }
            });
        });
    });

    //Keep a reference to important objects
    server.config = config;
    server.middleware = express;
    server.session_store = session_store;
    server.session_cookie = config.session || 'sid';

    //Load models if the dir exists
    loader(path + '/models', {
        ignore: true
      , args: config
    });

    //Load routes if the dir exists
    loader(path + '/routes', {
        ignore: true
      , args: [config, server]
      , scope: server
      , pre: ['auth', 'access']
      , post: ['error']
    });

    //Enable realtime features
    realtime(config, server);

    return server;

};

