var utils = require('../utils')
  , req = require('request')
  , qs = require('querystring');

/**
 * LinkedIn API calls.
 */

var base_url = 'https://api.linkedin.com/'
  , request_url = base_url + 'uas/oauth/requestToken'
  , authorise_url = base_url + 'uas/oauth/authenticate'
  , access_url = base_url + 'uas/oauth/accessToken'
  , account_url = base_url + 'v1/people/~';

/**
 * Profile fields to select.
 */

var fields = '(id,first-name,last-name,headline,location:(name,country:(code)),industry,'
           + 'num-connections,num-connections-capped,summary,specialties,proposal-comments,'
           + 'associations,honors,interests,positions,publications,patents,languages,skills,'
           + 'certifications,educations,three-current-positions,three-past-positions,'
           + 'num-recommenders,recommendations-received,phone-numbers,im-accounts,'
           + 'twitter-accounts,date-of-birth,main-address,member-url-resources,picture-url,'
           + 'site-standard-profile-request:(url),api-standard-profile-request:(url,headers),'
           + 'public-profile-url)';

/**
 * Add LinkedIn authentication. Visit `/linkedin` to start
 * the process.
 *
 * Config:
 *     `host` the full URL to your app, e.g. 'http://myapp.com'
 *     `linkedin` object containing { key, secret }
 *
 * Callback:
 *     `err` the auth error, or null on no error
 *     `user` an object containing user data and the oauth tokens
 *     `request` the HTTP request object
 *     `response` the HTTP response object
 *     `next`
 *
 * @param {HTTPServer} server
 * @param {object} config
 * @param {function} callbackFn
 * @api public
 */

module.exports = function (server, config, callbackFn) {

    var host = config.host.replace(/\/$/, '')
      , callback_path = '/linkedin/' + utils.randStr(4);

    var oauth = {
        callback: host + callback_path
      , consumer_key: config.linkedin.key
      , consumer_secret: config.linkedin.secret
    };

    server.get('/linkedin', function (request, response) {
        req.post({ url: request_url, oauth: oauth }, function (err, res, body) {
            if (!request.session && !err) err = 'session';
            if (err) return callbackFn(err, null, request, response, next);
            request.session.linkedin = qs.parse(body);
            url = authorise_url
                + '?oauth_token=' + request.session.linkedin.oauth_token;
            response.redirect(url);
        });
    });

    server.get(callback_path, function (request, response, next) {
        function callback(err, body) {
            callbackFn(err, body || null, request, response, next);
        }

        if (!request.session || !request.session.linkedin) {
            return callback('session');
        }

        var oauth = {
            consumer_key: config.linkedin.key
          , consumer_secret: config.linkedin.secret
          , token: request.session.linkedin.oauth_token
          , token_secret: request.session.linkedin.oauth_token_secret
          , verifier: request.param('oauth_verifier')
        };

        req.post({ url: access_url, oauth: oauth }, function (err, res, body) {
            if (err) return callback(err);

            var perms = qs.parse(body)
              , oauth = {
                consumer_key: config.linkedin.key
              , consumer_secret: config.linkedin.secret
              , token: perms.oauth_token
              , token_secret: perms.oauth_token_secret
            };

            var headers = { Accept: '/', 'x-li-format': 'json' };

            req.get({ url: account_url + fields, oauth: oauth, headers: headers }, function (err, res, user) {
                if (err || !user || user.error) return callback(err || user.error || 'error');;
                user.oauth = oauth;
                callback(null, user);
            });
        });
    });

};

